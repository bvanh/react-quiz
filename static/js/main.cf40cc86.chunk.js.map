{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","list","question","answer","correct","numberquestion","totalcorrect","status","isAnswered","listCorect","showAnswer","progress","timeout","interval","minute","second","numberQuestion","numberCorrect","index","newCorrect","this","newStatus","slice","setState","clearTimeout","clearInterval","console","log","newMinute","newSecond","timeOut","newInterval","setInterval","setTimeout","className","Button","color","size","onClick","startQuiz","printQuestion","printAnswer","map","key","checkAnswer","nextQuestion","printCorrect","show","ListGroupItem","resetQuiz","backHome","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf40cc86.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Button } from 'reactstrap';\r\nimport { ListGroupItem } from 'reactstrap';\r\nimport { Progress } from 'reactstrap';\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      list: [\r\n        {\r\n          question: 'Câu 1: Việt Nam có bao nhiêu tỉnh thành?',\r\n          answer: ['A: 64', 'B: 63', 'C: 62', 'D: 61'],\r\n          correct: 'B: 63'\r\n        },\r\n        {\r\n          question: 'Câu 2: Cậu Vàng có mấy chân?',\r\n          answer: ['A: 4', 'B: 3', 'C: 2', 'D: 1'],\r\n          correct: 'A: 4'\r\n        },\r\n        {\r\n          question: 'Câu 3: 2 con vịt đi trước 2 con vịt, 2 con vịt đi sau 2 con vịt, 2 con vịt đi giữa 2 con vịt. Hỏi có mấy con vịt?',\r\n          answer: ['A: 3', 'B: 4', 'C: 5', 'D: 6'],\r\n          correct: 'B: 4'\r\n        },\r\n        {\r\n          question: 'Câu 4: 9 – 6 - 1; 27 – 1 - 2; 6 - 3 - ... ?',\r\n          answer: ['A: 3', 'B: 4', 'C: 5', 'D: 6'],\r\n          correct: 'A: 3'\r\n        },\r\n        {\r\n          question: 'Câu 5: 1 + 2 + 3 + ..... + 99 = ?',\r\n          answer: ['A: 4850', 'B: 4580', 'C: 4950', 'D: 4590'],\r\n          correct: 'C: 4950'\r\n        }\r\n\r\n      ],\r\n      numberquestion: '',\r\n      totalcorrect: 0,\r\n      status: ['exit', 'exit', 'exit', 'exit'],\r\n      isAnswered: false,\r\n      listCorect: ['Câu 1: 63 Tỉnh', 'Câu 2: 4 Chân', 'Câu 3: 4 Con vịt', 'Câu 4: Số 3', 'Câu 5: Tổng = 4950'],\r\n      showAnswer: false,\r\n      progress: 0,\r\n      timeout:null,\r\n      interval:null,\r\n      minute: 0,\r\n      second: 15\r\n    }\r\n  }\r\n\r\n  checkAnswer(answer, numberQuestion, numberCorrect, isAnswered, index) {\r\n    if (isAnswered) {\r\n      return;\r\n    }\r\n    const newCorrect = this.state.list[numberQuestion].correct;\r\n    let newStatus = this.state.status.slice();\r\n    newStatus = ['exit', 'exit', 'exit', 'exit'];\r\n    if (newCorrect === answer) {\r\n      numberCorrect += 1;\r\n      newStatus[index] += ' exit1';\r\n    } else {\r\n      numberQuestion += 1;\r\n      newStatus[index] += ' exit2';\r\n    }\r\n    this.setState({\r\n      isAnswered: true,\r\n      totalcorrect: numberCorrect,\r\n      status: newStatus\r\n    })\r\n  }\r\n  nextQuestion(numberQuestion, isAnswered) {\r\n    let newStatus = this.state.status.slice();\r\n    newStatus = ['exit', 'exit', 'exit', 'exit'];\r\n    if (numberQuestion <= 4) {\r\n      numberQuestion += 1;\r\n    } else {\r\n      numberQuestion = 5\r\n    }\r\n    this.setState({\r\n      isAnswered: false,\r\n      numberquestion: numberQuestion,\r\n      status: newStatus\r\n    });\r\n  }\r\n  showAnswer() {\r\n    this.setState({\r\n      showAnswer: true\r\n    })\r\n  }\r\n  backHome(numberQuestion) {\r\n    numberQuestion = '';\r\n    clearTimeout(this.state.timeout);\r\n    clearInterval(this.state.interval)\r\n    this.setState({\r\n      numberquestion: numberQuestion,\r\n      showAnswer: false\r\n    });\r\n    console.log(this.state.second)\r\n  }\r\n  // start quiz\r\n  startQuiz(numberQuestion,newMinute,newSecond,timeOut,newInterval) {\r\n    newMinute = 0;\r\n    newSecond = 15;\r\n    numberQuestion = 0;\r\n    newInterval = setInterval(() => {\r\n      if (newSecond === 0) {\r\n        newMinute -= 1;\r\n        newSecond = 0;\r\n      } else if (newSecond > 0) {\r\n        newSecond -= 1;\r\n      }\r\n      this.setState({\r\n        minute: newMinute,\r\n        second: newSecond\r\n      });\r\n    }, 1000);\r\n  timeOut = setTimeout(() => {\r\n      this.setState({\r\n        numberquestion: 5,\r\n        status: ['exit', 'exit', 'exit', 'exit'],\r\n      })\r\n      clearInterval(newInterval)\r\n    }, 15000);\r\n    this.setState({\r\n      numberquestion: numberQuestion,\r\n      minute: newMinute,\r\n      second: newSecond,\r\n      timeout:timeOut,\r\n      interval:newInterval\r\n    })\r\n    console.log(this.state.timeout,timeOut)\r\n  }\r\n  // reset quiz\r\n  resetQuiz(numberQuestion, numberCorrect, newStatus, newMinute, newSecond,timeOut,newInterval) {\r\n    numberQuestion = 0;\r\n    numberCorrect = 0;\r\n    newStatus = ['exit', 'exit', 'exit', 'exit'];\r\n    clearTimeout(this.state.timeout);\r\n    clearInterval(this.state.interval)\r\n    newMinute = 0;\r\n    newSecond = 15;\r\n    newInterval = setInterval(() => {\r\n      if (newSecond === 0) {\r\n        newMinute -= 1;\r\n        newSecond = 0;\r\n      } else if (newSecond > 0) {\r\n        newSecond -= 1;\r\n      }\r\n      this.setState({\r\n        minute: newMinute,\r\n        second: newSecond\r\n      });\r\n    }, 1000);\r\n    timeOut=setTimeout(() => {\r\n      this.setState({\r\n        numberquestion: numberQuestion = 5,\r\n        status: ['exit', 'exit', 'exit', 'exit'],\r\n      })\r\n      clearInterval(newInterval)\r\n    }, 15000);\r\n    this.setState({\r\n      numberquestion: numberQuestion,\r\n      totalcorrect: numberCorrect,\r\n      status: newStatus,\r\n      showAnswer: false,\r\n      minute: newMinute,\r\n      second: newSecond,\r\n      isAnswered: false,\r\n      timeout:timeOut,\r\n      interval:newInterval\r\n    })\r\n    console.log(this.state.timeout,newInterval)\r\n  }\r\n  render() {\r\n    const numberQuestion = this.state.numberquestion;\r\n    const numberCorrect = this.state.totalcorrect;\r\n    const newStatus = this.state.status;\r\n    const isAnswered = this.state.isAnswered;\r\n    const showAnswer = this.state.showAnswer;\r\n    const newMinute = this.state.minute;\r\n    const newSecond = this.state.second;\r\n    const timeOut=this.state.timeout;\r\n    const newInterval=this.state.interval;\r\n    if (numberQuestion === '') {\r\n      return (\r\n        <div className=\"start\">\r\n          <h1>Welcome to My Quiz ?!</h1>\r\n          <h4>In 15 seconds</h4>\r\n          <Button color=\"primary\" size=\"lg\" onClick={() => this.startQuiz(numberQuestion,timeOut,newInterval)}>Let's Go</Button>\r\n\r\n        </div>\r\n      )\r\n    } else if (numberQuestion <= 4 && numberQuestion >= 0) {\r\n      const printQuestion = this.state.list[numberQuestion].question;\r\n      const listAnwers = this.state.list[numberQuestion].answer;\r\n      const printAnswer = listAnwers.map((answer, index) =>\r\n        <li key={index}>\r\n          <h3 className={newStatus[index]} onClick={() => this.checkAnswer(answer, numberQuestion, numberCorrect, isAnswered, index)}>\r\n            <p>{answer}</p>\r\n          </h3>\r\n        </li>\r\n      )\r\n      return (\r\n        <div className=\"App\">\r\n          <div>\r\n            <h1>Quiz</h1>\r\n            <ul>\r\n              <h2>{printQuestion}</h2>\r\n            </ul>\r\n            {printAnswer}\r\n            <p className='countdown'>{newMinute < 10 ? \"0\" + newMinute : newMinute}:{newSecond < 10 ? \"0\" + newSecond : newSecond}</p>\r\n            {isAnswered &&\r\n              <Button className='btn' color=\"success\" onClick={() => this.nextQuestion(numberQuestion, isAnswered)}>Tiếp theo</Button>\r\n            }\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      const listCorect = this.state.listCorect;\r\n      const printCorrect = listCorect.map((show, index) =>\r\n\r\n        <ListGroupItem key={index}>{show}</ListGroupItem>\r\n\r\n      )\r\n      return (\r\n        <div className=\"finish\">\r\n          <h1>Hoàn Thành !!!</h1>\r\n          <h6>Bạn đã đúng {numberCorrect} / 5 câu</h6>\r\n          <Button color='success' className='btn' onClick={() => this.resetQuiz(numberQuestion, numberCorrect, newStatus,timeOut,newInterval)}>Làm lại</Button>{' '}\r\n          <Button color='primary' className='btn' onClick={() => this.showAnswer()}>Xem đáp án</Button>{' '}\r\n          <Button color=\"danger\" onClick={() => this.backHome(numberQuestion, newMinute, newSecond)}>Homepage</Button>\r\n          {showAnswer &&\r\n            <div>\r\n              {printCorrect}\r\n            </div>\r\n          }\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n    // const progress=this.state.progress;\r\n    // const interval = setInterval(() => {\r\n    //   this.setState({\r\n    //     progress: this.state.progress + 10\r\n    //   })\r\n    // }, 100);\r\n\r\n    // // Sau 2 giây tự chuyển câu\r\n    // setTimeout(() => {\r\n    //   this.setState({\r\n    //     numberquestion: numberQuestion + 1,\r\n    //     isAnswered: false,\r\n    //     status: ['exit', 'exit', 'exit', 'exit'],\r\n    //     progress: 0\r\n    //   })\r\n\r\n    //   clearInterval(interval)\r\n    // }, 1600)\r\n    // newSecond = 15;\r\n    // newInterval = setInterval(() => {\r\n    //   if (newSecond === 0) {\r\n    //     newMinute -= 1;\r\n    //     newSecond = 0;\r\n    //   } else if (newSecond > 0) {\r\n    //     newSecond -= 1;\r\n    //   }\r\n    //   this.setState({\r\n    //     minute: newMinute,\r\n    //     second: newSecond\r\n    //   });\r\n    // }, 1000);\r\n    // timeOut=setTimeout(() => {\r\n    //   this.setState({\r\n    //     numberquestion: numberQuestion = 5,\r\n    //     status: ['exit', 'exit', 'exit', 'exit'],\r\n    //   })\r\n    //   clearInterval(newInterval)\r\n    // }, 15000);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}